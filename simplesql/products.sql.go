// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: products.sql

package simplesql

import (
	"context"
)

const addProduct = `-- name: AddProduct :one

INSERT INTO products (name, price) VALUES ($1, $2) RETURNING id, name, price, created_at, updated_at
`

type AddProductParams struct {
	Name  string `json:"name"`
	Price int32  `json:"price"`
}

func (q *Queries) AddProduct(ctx context.Context, arg AddProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, addProduct, arg.Name, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const queryAllProduct = `-- name: QueryAllProduct :many

SELECT id, name, price, created_at, updated_at FROM products
`

func (q *Queries) QueryAllProduct(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, queryAllProduct)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryProductByName = `-- name: QueryProductByName :one

SELECT id, name, price, created_at, updated_at FROM products WHERE name = $1 LIMIT 1
`

func (q *Queries) QueryProductByName(ctx context.Context, name string) (Product, error) {
	row := q.db.QueryRowContext(ctx, queryProductByName, name)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
