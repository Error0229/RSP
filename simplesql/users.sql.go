// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package simplesql

import (
	"context"
)

const createUser = `-- name: CreateUser :one

INSERT INTO
    users (name, email, password, role)
VALUES ($1, $2, $3, $4)
RETURNING id, name, email, password, role, created_at, updated_at
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Role     string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const queryAllUser = `-- name: QueryAllUser :many

SELECT id, name, email, password, role, created_at, updated_at FROM users
`

func (q *Queries) QueryAllUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, queryAllUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryUserByEmail = `-- name: QueryUserByEmail :one

SELECT id, name, email, password, role, created_at, updated_at FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) QueryUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, queryUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
